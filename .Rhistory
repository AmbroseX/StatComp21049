#library(microbenchmark)
ts <-microbenchmark(bivariate.chain(N,n,a,b,X0,Y0))
#rm(list=ls())
library(Rcpp)
# Can create source file in Rstudio
cppFunction('NumericMatrix bivariateC(int N,int n,double a,double b,double X0,double Y0) {
NumericMatrix X(2,N);
NumericVector temp(1);
X(0,0) = X0;
X(1,0) = Y0;
double X1 = 0;
double Y1 = 0;
for(int i=1;i<=N;i++){
Y1 =  X(1,i-1);
temp =  rbinom(1,n,Y1);
X(0,i) = temp[0];
X1 = X(0,i);
temp = rbeta(1,X1+a,n-X1+b);
X(1,i) = temp[0];
}
return X;
}
')
N <- 5000 #链的长度
burn <- 1000 #burn-in length
###### Mode Parameter #####
n <- 50
a <- 1
b <- 2
###### 产生链的函数 #####
bivariate.chain <- function(N,n,a,b,X1,Y1){
# N个数据点 参数 n,a,b,初值 X1,Y1
X <- matrix(0,2,N)
X[1,1] <- X1  #初始值
X[2,1] <- Y1
for (i in 2:N){
y2 <- X[2,i-1]
X[1,i] <- rbinom(1,n,y2)
x2 <- X[1,i]
X[2,i] <- rbeta(1,x2+a,n-x2+b)
}
return(X)
}
X0 <- 1
Y0 <- 0.05
rm(list=ls())
library(Rcpp)
# Can create source file in Rstudio
cppFunction('NumericMatrix bivariateC(int N,int n,double a,double b,double X0,double Y0) {
NumericMatrix X(2,N);
NumericVector temp(1);
X(0,0) = X0;
X(1,0) = Y0;
double X1 = 0;
double Y1 = 0;
for(int i=1;i<=N;i++){
Y1 =  X(1,i-1);
temp =  rbinom(1,n,Y1);
X(0,i) = temp[0];
X1 = X(0,i);
temp = rbeta(1,X1+a,n-X1+b);
X(1,i) = temp[0];
}
return X;
}
')
N <- 5000 #链的长度
burn <- 1000 #burn-in length
###### Mode Parameter #####
n <- 50
a <- 1
b <- 2
###### 产生链的函数 #####
bivariate.chain <- function(N,n,a,b,X1,Y1){
# N个数据点 参数 n,a,b,初值 X1,Y1
X <- matrix(0,2,N)
X[1,1] <- X1  #初始值
X[2,1] <- Y1
for (i in 2:N){
y2 <- X[2,i-1]
X[1,i] <- rbinom(1,n,y2)
x2 <- X[1,i]
X[2,i] <- rbeta(1,x2+a,n-x2+b)
}
return(X)
}
X0 <- 1
Y0 <- 0.05
rm(list=ls())
library(Rcpp)
# Can create source file in Rstudio
cppFunction('NumericMatrix bivariateC(int N,int n,double a,double b,double X0,double Y0) {
NumericMatrix X(2,N);
NumericVector temp(1);
X(0,0) = X0;
X(1,0) = Y0;
double X1 = 0;
double Y1 = 0;
for(int i=1;i<=N;i++){
Y1 =  X(1,i-1);
temp =  rbinom(1,n,Y1);
X(0,i) = temp[0];
X1 = X(0,i);
temp = rbeta(1,X1+a,n-X1+b);
X(1,i) = temp[0];
}
return X;
}
')
N <- 5000 #链的长度
burn <- 1000 #burn-in length
###### Mode Parameter #####
n <- 50
a <- 1
b <- 2
###### 产生链的函数 #####
bivariate.chain <- function(N,n,a,b,X1,Y1){
# N个数据点 参数 n,a,b,初值 X1,Y1
X <- matrix(0,2,N)
X[1,1] <- X1  #初始值
X[2,1] <- Y1
for (i in 2:N){
y2 <- X[2,i-1]
X[1,i] <- rbinom(1,n,y2)
x2 <- X[1,i]
X[2,i] <- rbeta(1,x2+a,n-x2+b)
}
return(X)
}
X0 <- 1
Y0 <- 0.05
rm(list=ls())
library(Rcpp)
# Can create source file in Rstudio
cppFunction('NumericMatrix bivariateC(int N,int n,double a,double b,double X0,double Y0) {
NumericMatrix X(2,N);
NumericVector temp(1);
X(0,0) = X0;
X(1,0) = Y0;
double X1 = 0;
double Y1 = 0;
for(int i=1;i<=N;i++){
Y1 =  X(1,i-1);
temp =  rbinom(1,n,Y1);
X(0,i) = temp[0];
X1 = X(0,i);
temp = rbeta(1,X1+a,n-X1+b);
X(1,i) = temp[0];
}
return X;
}
')
N <- 5000 #链的长度
burn <- 1000 #burn-in length
###### Mode Parameter #####
n <- 50
a <- 1
b <- 2
###### 产生链的函数 #####
bivariate.chain <- function(N,n,a,b,X1,Y1){
# N个数据点 参数 n,a,b,初值 X1,Y1
X <- matrix(0,2,N)
X[1,1] <- X1  #初始值
X[2,1] <- Y1
for (i in 2:N){
y2 <- X[2,i-1]
X[1,i] <- rbinom(1,n,y2)
x2 <- X[1,i]
X[2,i] <- rbeta(1,x2+a,n-x2+b)
}
return(X)
}
X0 <- 1
Y0 <- 0.05
dataR <- bivariate.chain(N,n,a,b,X0,Y0)
dataC <- bivariateC(N,n,a,b,X0,Y0)
##Plot 分布
plot(dataR[1,],dataR[2,],xlab = "x",ylab = "y",main = "Using R")
plot(dataC[1,],dataC[2,],xlab = "x",ylab = "y",main = "Using Cpp")
#library(microbenchmark)
ts <-microbenchmark(bivariate.chain(N,n,a,b,X0,Y0))
library(microbenchmark)
ts <-microbenchmark(bivariate.chain(N,n,a,b,X0,Y0))
summary(ts)[,c(1,3,5,6)]
# ts <- microbenchmark(bivariateC(N,n,a,b,X0,Y0))
# summary(ts)[,c(1,3,5,6)]
getwd()
a <- read.csv("./raw-data/curve_data.csv")
a <- read.csv("./raw-data/curve_data.csv",header = FALSE)
# batch_deseq ------------------------------------------------------------------
a <- read.csv("curve_data.csv",header = FALSE)
curve_data <- read.csv("data-raw/curve_data.csv",header = FALSE)
View(curve_data)
N(1)
library(StatComp21049)
vignette("package"="StatComp21049")
devtools::build_vignettes()
library(StatComp21049)
vignette("package"="StatComp21049")
vignette("package"=StatComp21049)
vignette(package="StatComp21049")
library(StatComp21049)
vignette(package="StatComp21049")
usethis::use_mit_license("Rongkang Xiong")
usethis::use_readme_md()
usethis::use_code_of_conduct()
usethis::use_package("boot")
usethis::use_readme_md()
citation()
citation(package = "StatComp21049")
usethis::use_code_of_conduct()
usethis::use_code_of_conduct("earth@mail.ustc.edu.cn")
usethis::use_package("stats")
usethis::use_mit_license("Rongkang Xiong")
a<-matrix(0, nrow = 3, ncol = 3)
size(a)
sizeof(a)
dim(a)
(m,n) <- dim(a)
dim(a)[1]
dim(a)[2]
matrix(rnorm(1),2,3)
matrix(rnorm(4),2,3)
matrix(rnorm(6),2,3)
a <- matrix(rnorm(10),2,5)
cova <- t(a)%*%a
View(cova)
ev <- eigen(cova)
View(ev)
ev$values
ev$vectors
eigenvalues <- ev$values
PR <- sum(eigenvalues)^2/(sum(eigenvalues^2))
devtools::load_all()
devtools::load_all()
Get_Matrix_Dimension(a)
# testdata <- R.matlab::readMat('./data-raw/wormdata.mat')
usethis::use_mit_license("Rongkang Xiong")
usethis::use_rcpp()
usethis::use_mit_license("Rongkang Xiong")
library(StatComp21049)
usethis::use_data(time_Elapsed,overwrite = TRUE)
usethis::use_data(time_Elapsed,overwrite = TRUE)
# testdata <- R.matlab::readMat('./data-raw/wormdata.mat')
usethis::use_data(time_Elapsed,overwrite = TRUE)
#usethis::use_data(curve_data,overwrite = TRUE)
#usethis::use_data(time_Elapsed,overwrite = TRUE)
read.csv("data-raw/curve_data.csv",header = FALSE)
curve_data <- read.csv("data-raw/curve_data.csv",header = FALSE)
time_Elapsed <- read.csv("data-raw/TimeElapsed.csv",header = FALSE)
usethis::use_data(curve_data,overwrite = TRUE)
usethis::use_data(time_Elapsed,overwrite = TRUE)
curve_data <- read.csv("data-raw/curve_data.csv",header = FALSE)
time_Elapsed <- read.csv("data-raw/TimeElapsed.csv",header = FALSE)
usethis::use_data(curve_data,overwrite = TRUE,compress = "bzip2")
usethis::use_data(time_Elapsed,overwrite = TRUE,compress = "bzip2")
load("G:/Data/Program/RScript/Rproject/StatComp21049/data/curve_data.rda")
View(curve_data)
knitr::opts_chunk$set{
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
?Get_Matrix_Dimension
?Get_Matrix_Dimension
?Get_Matrix_Dimension
bookdown:::mathquill()
Sedn
Send
send
?Send
X <- curve_data
X[ , 1:2]
devtools::load_all(".")
devtools::load_all(".")
Plot_Matrix_Dimension()
devtools::load_all(".")
Plot_Matrix_Dimension()
X[ , 1:1]
a <- X[ , 1:1]
devtools::load_all(".")
Plot_Matrix_Dimension()
a<-X[ , 1:2]
Get_Matrix_Dimension(a)
t(a)%*%a
t(X)%*%X
t(X)
b <- t(X)
View(b)
b%*%X
X <- t(b)
b%*%X
devtools::load_all(".")
Plot_Matrix_Dimension()
Get_Matrix_Dimension(curve_data)
devtools::load_all(".")
X <- data("curve_data")
data("curve_data")
devtools::load_all(".")
Plot_Matrix_Dimension()
devtools::load_all(".")
Plot_Matrix_Dimension()
devtools::load_all(".")
Plot_Matrix_Dimension()
X <- data("curve_data")
X <- data(curve_data)
X <- data(curve_data)
gc()
devtools::load_all(".")
Plot_Matrix_Dimension()
devtools::load_all(".")
Plot_Matrix_Dimension()
devtools::load_all(".")
Plot_Matrix_Dimension()
c(1:10)
devtools::load_all(".")
Plot_Matrix_Dimension()
devtools::load_all(".")
Plot_Matrix_Dimension()
devtools::load_all(".")
Plot_Matrix_Dimension()
